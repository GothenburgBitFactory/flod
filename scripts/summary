#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2017, Göteborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import sys
import os
import datetime
import json
import flod

template_header="""<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href="/images/favicon.ico">

    <title>Flod2 - Grid CI</title>

    <link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <style type="text/css">
      /* "foo" element, "#foo ID, ".foo" class */
      html                   {position:relative; min-height:100%;}
      body                   {color:#bbb; background-color:#222; margin-top:60px; margin-bottom:80px; z-index:1}
      th                     {border:3px solid #222; margin:4px; color:#bbb; padding:2px;}
      td                     {border:3px solid #222; margin:4px;             padding:2px;}
      a:link, a:visited      {color:#bbb;}
      a:hover                {color:#ddd;}
      a:active               {color:#fff;}
      .flod-commit           {color:#bbb; background-color:#444;}
      .flod-commit-clean     {color:#c6e2ff; background-color:#417dba;}
      .flod-commit-funky     {color:#ffafd7; background-color:#822453;}
      .flod-details          {font-weight:100; font-size:75%;}
      .flod-header           {margins:0px;padding:0px;  background-color:#000; width:100%; position:fixed; top:0;    z-index:2}
      .flod-footer           {margins:0px;padding:12px; background-color:#000; width:100%; position:fixed; bottom:0; z-index:3; color:#666}
      .flod-large            {font-size:200%}
    </style>

    <!--[if lt IE 9]><script src="/bootstrap/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>
    <div class="flod-header flod-large">
      <a href="https://cen.tasktools.org"><img src="/images/flod-m.png" alt="Flod"></a>
      <strong>&nbsp;FLOD Testing</strong> | All projects
    </div>

    <!-- dynamic content start -->

    <div class="container">
      <div class="col-md-8 main">
        <div class="row">
          <h2></h2>
          <table class="table">
"""

template_copyright="""
          </table>
        </div>
      </div>
    </div>

    <!-- dynamic content end -->

    <div class="flod-footer" style="text-align:right;">
      Copyright &copy; {} Göteborg Bit Factory
    </div>
"""

template_footer="""
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script src="/bootstrap/js/bootstrap.min.js"></script>

    <!-- Piwik -->
    <script type="text/javascript">
      var _paq = _paq || [];
      _paq.push(["trackPageView"]);
      _paq.push(["enableLinkTracking"]);

      (function() {
        var u=(("https:" == document.location.protocol) ? "https" : "http") + "://see.tasktools.org/piwik/";
        _paq.push(["setTrackerUrl", u+"piwik.php"]);
        _paq.push(["setSiteId", "3"]);
        var d=document, g=d.createElement("script"), s=d.getElementsByTagName("script")[0]; g.type="text/javascript";
        g.defer=true; g.async=true; g.src=u+"piwik.js"; s.parentNode.insertBefore(g,s);
      })();
    </script>
    <!-- End Piwik Code -->
  </body>
</html>
"""

################################################################################
def which_color(percentage):
  # Only 100% is green.
  if percentage >= 100.0:
    return '#080', '#d2ffa2'

  # Yellow
  #   255 255 153    #99
  #   216 178 178    #90
  elif percentage > 90.0:
    red   = (((percentage - 90.0) / 10.0) * (255 - 216) + 216)
    green = (((percentage - 90.0) / 10.0) * (255 - 178) + 178)
    blue  = (((percentage - 90.0) / 10.0) * (153 - 178) + 178)
    fg = '#000'

  # Red
  #   216 178 178    #90
  #   216  76  76    #75
  elif percentage > 75.0:
    red = 216
    green = (((percentage - 75.0) / 15.0) * (178 - 76) + 76)
    blue  = (((percentage - 75.0) / 15.0) * (178 - 76) + 76)
    fg = '#000'

  # Brown
  #   216 76 76      #75
  #   64  22 22      #0
  elif percentage > 0.0:
    red   = ((percentage / 75.0) * (216 - 64)) + 64
    green = ((percentage / 75.0) * (76 - 22)) + 22
    blue = ((percentage / 75.0) * (76 - 22)) + 22
    fg = '#fff'

  # Black
  #   000 000 000    #0
  else:
    # Tests did run.
    red   = 0
    green = 0
    blue  = 0
    fg = '#fff'

  return fg, '#{:02X}{:02X}{:02X}'.format(int(red), int(green), int(blue))

################################################################################
def findLatestCommit(commit_dir):
  latest_commit = None
  for commit in os.listdir(commit_dir):
    if len(commit) == 40: # Length of a SHA1.
      commit_json_file = os.path.join(commit_dir, commit, 'commit.json')
      with open(commit_json_file) as fh:
        commit_json = json.load(fh)

      if latest_commit == None or int(commit_json['timestamp']) > int(latest_commit['timestamp']):
        latest_commit = commit_json

  return latest_commit

################################################################################
# Summarize from the platform results we have, not the set of platforms we
# expect. This is subtly different from the report script.
def summarizeCommit(commit):
  warnings = 0
  errors   = 0
  expected = 0
  failed   = 0
  skipped  = 0
  passed   = 0
  funky    = 0
  clean    = 0
  for platform in commit['platforms']:
    warnings += int(commit['platforms'][platform]['warnings'])
    errors   += int(commit['platforms'][platform]['errors'])
    expected += int(commit['platforms'][platform]['expected'])
    failed   += int(commit['platforms'][platform]['failed'])
    skipped  += int(commit['platforms'][platform]['skipped'])
    passed   += int(commit['platforms'][platform]['passed'])
    funky    += int(commit['platforms'][platform]['funky'])
    clean    += int(commit['platforms'][platform]['clean'])

  if funky:
    return '<span class="flod-commit-funky">Funky</span>'

  if clean == len(commit['platforms']):
    return '<span class="flod-commit-clean">Clean</span>'

  message = '&nbsp;'
  if errors:
    message += ' E'

  if warnings:
    message += ' W'

  percentage = 0
  if expected > 0:
    percentage = (100.0 * (passed + skipped)) / expected
    message += ' {}% '.format(percentage)
  else:
    message += ' Failed '

  fg, bg = which_color(percentage);
  return '<span style="color:{}; background-color:{};">{}</span>'.format (fg, bg, message)

################################################################################
# Create the index.html fiŀe.
def writeReport(base_dir):
  report_file = '{}/index.html'.format(base_dir)
  with open(report_file, 'w') as report:
    report.write(template_header)

    for project in sorted(os.listdir(base_dir)):
      if project.endswith('.html'):
        continue

      branch_dir = os.path.join(base_dir, project)
      for branch in sorted(os.listdir(branch_dir)):
        report.write("            <tr>\n")
        report.write("              <td>{}</td>\n".format(project))
        report.write("              <td><a href=\"/{0}.{1}.html\">{1}</a></td>\n".format(project, branch))

        # Write latest commit summary.
        summary = summarizeCommit(findLatestCommit(os.path.join(branch_dir, branch)))
        report.write("              <td>{}</td>\n".format(summary))
        report.write("            </tr>\n")

        # TODO Offer tarball link

    report.write(template_copyright.format(datetime.datetime.now().year))
    report.write(template_footer)
  return report_file

################################################################################
# Publish the report file.
def publishReport(config, report_file):
  publish_event = flod.Event()
  publish_event.header('from', report_file)
  publish_event.header('to', os.path.join(config.get('report.destination'), 'index.html'))

  central = flod.Central()
  central.post('publish', publish_event)

################################################################################
# Reduces a result event to a summarized digest event.
def main():
  config = flod.Config()

  # Scan and look for clean/funky commits.
  report_file = writeReport(config.get('work.dir'))
  publishReport(config, report_file)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for creating a summary report from a digest event.
     Note: The event file is irrelevant - the whole sumamry is updated.
  """

  if len(sys.argv) != 2:
    print "\nUsage: summary\n\n"
    sys.exit(1)

  try:
    main()
  except Exception as msg:
    print('Error:', msg)

