#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2016, Göteborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import sys
import subprocess
import re


def load_event(event_file):
  """ Load an event file, and extract only the headers. """
  event = dict()
  with open(event_file) as fh:
    for line in fh:
      if line == "\n":
        break;
      sep = line.index(': ')
      event[line[:sep]] = line.strip()[sep + 2:]

  for required in ['project', 'repository', 'author', 'commit', 'timestamp', 'branch']:
    if required not in event:
      raise ValueError ("Missing '%s' in %s" % (required, event_file))

  return event


def load_central_config():
  """ Load the entire central configuration. """
  config = dict()
  output = subprocess.Popen(["central", "config"], stdout=subprocess.PIPE).communicate()[0]
  for line in output.split('\n'):
    if line == "":
      break;

    sep = line.index('=')
    config[line[:sep]] = line[sep + 1:]
  return config


def main(event_file):
  """Reads input change event, emits a build event per platform."""
  event = load_event(event_file)
#  for k,v in event.items():
#    print 'EVENT', k, '=', v

  config = load_central_config()
#  for k,v in config.items():
#    print 'CONFIG', k, '=', v

  for platform in config["project.%s.platforms" % event['project']].split(','):
    print 'platform', platform
    build = dict()
    for k,v in event.items():
      build[k] = v

    for detail in ['scm', 'repository', 'prebuild', 'build', 'test']:
      build['project.%s' % detail] = config['project.%s.%s' % (event['project'], detail)]

    # scm values need substitutions.
    scm = build['project.scm']
    for detail in ['obtain', 'branch', 'commit']:
      value = config['scm.%s.%s' % (scm, detail)]
      for match in re.findall (r'\${(\w+)}', value):
        value = value.replace('${%s}' % match, build[match])
      build['scm.%s' % detail] = value

    build['platform.description'] = config['platform.%s.description' % platform]

#        project.dependencies --> platform.x.pkg

    # TODO Write the build event to tmp file
    # TODO Post the build event
    # TODO unlink the tmp file

    for key in sorted(build):
      print '  ', key, '=', build[key]


if __name__ == "__main__":
  usage="""Flod2 hook script for issuing build events in response to change events."""

  if len(sys.argv) != 2:
    print "\nUsage: prepare_builds <change-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)






# TODO Given that $EVENT contains this:
#      project
#      branch
#      commit
#      author
#      timestamp

# TODO Given that central .flodrc contains this:
#      project.task.description     'Example repository for demo purposes'
#      project.task.ignore          'README*,*.md'
#      project.task.platforms       'debian7,freebsd'
#      project.task.dependencies    'git,c++,gnutls,uuid,python'
#      project.task.scm             'git'
#      project.task.repository      'https://git.tasktools.org/scm/tm/task.git'
#      project.task.prebuild        'cmake .'
#      project.task.build           'make'
#      project.task.test            'make test'
#      scm.git.obtain               'git clone ${project.${event.project}.repository}'
#      scm.git.branch               'git checkout ${event.branch}'
#      scm.git.commit               'git reset —hard ${event.commit}'
#      platform.debian7.description 'Debian 7 wheezy'
#      platform.debian7.pkg.git     'git'
#      platform.debian7.pkg.c++     'build-essential'
#      platform.debian7.pkg.gnutls  'gnutls-dev'
#      platform.debian7.pkg.uuid    'uuid-dev'
#      platform.debian7.pkg.python  'python'
#      platform.freebsd.description 'FreeBSD 9'
#      platform.freebsd.pkg.git     'git'
#      platform.freebsd.pkg.c++     'build-essential'
#      platform.freebsd.pkg.gnutls  'gnutls-dev'
#      platform.freebsd.pkg.uuid    ''
#      platform.freebsd.pkg.python  'python'

# TODO Compose these two events:
#        project:               task
#        branch:                2.5.1
#        commit:                39cc00ce9d34b1253b41ca9dd555106ea98eb9c2
#        author:                Paul Beckingham <paul@beckingham.net>
#        timestamp:             Wed Jan 27 13:39:45 2016 -0500
#        project.scm:           git
#        project.repository:    https://git.tasktools.org/scm/tm/task.git
#        project.prebuild:      cmake .
#        project.build:         make
#        project.test:          make test
#        scm.obtain:            git clone https://git.tasktools.org/scm/tm/task.git
#        scm.branch:            git checkout 2.5.1
#        scm.commit:            git reset —hard 39cc00ce9d34b1253b41ca9dd555106ea98eb9c2
#        platform.description:  Debian 7 wheezy
#        platform.dependencies: git,build-essential,gnutls-dev,uuid-dev,python

#        project:               task
#        branch:                2.5.1
#        commit:                39cc00ce9d34b1253b41ca9dd555106ea98eb9c2
#        author:                Paul Beckingham <paul@beckingham.net>
#        timestamp:             Wed Jan 27 13:39:45 2016 -0500
#        project.scm:           git
#        project.repository:    https://git.tasktools.org/scm/tm/task.git
#        project.prebuild:      cmake .
#        project.build:         make
#        project.test:          make test
#        scm.obtain:            git clone https://git.tasktools.org/scm/tm/task.git
#        scm.branch:            git checkout 2.5.1
#        scm.commit:            git reset —hard 39cc00ce9d34b1253b41ca9dd555106ea98eb9c2
#        platform.description:  FreeBSD 9
#        platform.dependencies: git,build-essential,gnutls-dev,python

