#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2016, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import subprocess
import re
import tempfile

################################################################################
# Loads a change event file and verifies that the expected header variables are
# present. Payload is ignored.
def load_event(event_file):
  """ Load an event file, and extract only the headers. """
  event = dict()
  with open(event_file) as fh:
    for line in fh:
      if line == "\n":
        break;
      sep = line.index(': ')
      event[line[:sep]] = line.strip()[sep + 2:]

  for required in ['change.project', 'change.repository', 'change.author', 'change.commit', 'change.timestamp', 'change.branch']:
    if required not in event:
      raise ValueError ("Missing '%s' in %s" % (required, event_file))

  return event

################################################################################
# Uses the 'central config' command to enumerate all settings, which are
# captured and loaded into a dict.
def load_central_config():
  """ Load the entire central configuration. """
  config = dict()
  output = subprocess.Popen(["central", "config"], stdout=subprocess.PIPE).communicate()[0]
  for line in output.split('\n'):
    if line == "":
      break;

    sep = line.index('=')
    config[line[:sep]] = line[sep + 1:]
  return config

################################################################################
# Combines a change event with central configuration to yield a build event.
# Uses 'central post build $file' to queue the build event.
def main(event_file):
  """Reads input change event, emits a build event for each necessary platform."""
  event = load_event(event_file)
  project = event['change.project']

  config = load_central_config()

  for platform in config["project.%s.platforms" % project].split(','):
    build = dict()
    for k,v in event.items():
      build[k] = v

    for detail in ['scm', 'repository', 'prebuild', 'build', 'test']:
      build['project.%s' % detail] = config['project.%s.%s' % (project, detail)]

    # scm values need substitutions.
    scm = build['project.scm']
    for detail in ['obtain', 'branch', 'commit']:
      value = config['scm.%s.%s' % (scm, detail)]
      for match in re.findall (r'\${(\w+)}', value):
        value = value.replace('${%s}' % match, build[match])
      build['scm.%s' % detail] = value

    build['platform.description'] = config['platform.%s.description' % platform]

    dependencies = list()
    for dependency in config['project.%s.dependencies' % project].split(','):
      mapped = config['platform.%s.pkg.%s' % (platform, dependency)]
      if mapped:
        dependencies.append(mapped)
    build['platform.dependencies'] = ','.join(dependencies)

    # Write the build event to tmp file.
    temp_fh, temp_name = tempfile.mkstemp()
    with open(temp_name, 'w') as fh:
      for key in sorted(build):
        fh.write('%s: %s\n' % (key, build[key]))
      fh.write('\n')
    os.close(temp_fh)

    # Post the event to central.
    subprocess.Popen(["central", "post", "builds", temp_name], stdout=subprocess.PIPE).communicate()[0]
    os.unlink(temp_name)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for issuing build events in response to change events."""

  if len(sys.argv) != 2:
    print "\nUsage: prepare_builds <change-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

