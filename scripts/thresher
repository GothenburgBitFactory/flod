#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2016, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import re
import subprocess
import tempfile

################################################################################
# Loads a change event file and verifies that the expected header variables are
# present. Payload is ignored.
def load_event(event_file):
  """ Load an event file, and extract only the headers. """
  headers = dict()
  body = ''
  in_headers = True
  with open(event_file) as fh:
    for line in fh:
      if line == "\n":
        in_headers = False
      elif in_headers:
        sep = line.index(': ')
        headers[line[:sep]] = line.strip()[sep + 2:]
      else:
        body += line

  return headers, body

################################################################################
# Reduces a result event to a summarized digest event.
def main(event_file):
  """Reads input result event, emits a condense event with a minimal payload
     that represents build warnings, error and test results."""
  event, payload = load_event(event_file)

  # Things that are being looked for in the event file.
  buildWarnings = 0
  buildErrors   = 0
  testsPassed   = 0
  testsFailed   = 0
  testsSkipped  = 0
  testsExpected = 0

  # This is simply a list of lines from the build log that contain information
  # that should be shown in drill-down.  As 'buildWarnings' above might be '2',
  # this list would contain both of those warnings.
  interesting = list()

  # Patterns to search for.
  reWarning  = re.compile ('warning: ', re.IGNORECASE)
  reError    = re.compile ('error: ', re.IGNORECASE)
  reExpected = re.compile ('^1\\.\\.(\d+)$')
  rePassed   = re.compile ('^ok \d+')
  reFailed   = re.compile ('^not ok \d+')
  reSkipped  = re.compile ('^skip \d+')

  # Scan for results.
  for line in payload.split('\n'):
    m = reWarning.search (line)
    if m:
      interesting.append(line)
      buildWarnings += 1

    m = reError.search (line)
    if m:
      interesting.append(line)
      buildErrors += 1

    m = reExpected.match (line)
    if m:
      testsExpected += int(m.group(1))

    m = rePassed.match (line)
    if m:
      testsPassed += 1

    m = reFailed.match (line)
    if m:
      testsFailed += 1

    m = reSkipped.match (line)
    if m:
      testsSkipped += 1

  # Capture the totals.
  event['digest.buildWarnings'] = buildWarnings
  event['digest.buildErrors']   = buildErrors
  event['digest.testsPassed']   = testsPassed
  event['digest.testsFailed']   = testsFailed
  event['digest.testsSkipped']  = testsSkipped
  event['digest.testsExpected'] = testsExpected

  # Write the digest event.
  temp_fh, temp_name = tempfile.mkstemp()
  for key, value in event.items():
    os.write(temp_fh, '{0}: {1}\n'.format(key, value))

  os.write(temp_fh, '\n')
  for line in interesting:
    os.write(temp_fh, '{}\n'.format(line))

  os.close(temp_fh)

  # Post the event to central.
  # TODO Do something with errors.
  out, err = subprocess.Popen(["central", "post", "digest", temp_name], stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
  os.unlink(temp_name)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for reducing a build/test log down to minimal elements,
     which are warnings, error and test results."""

  if len(sys.argv) != 2:
    print "\nUsage: thresher <change-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

