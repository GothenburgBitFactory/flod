#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2017, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import sys
import re
import flod

################################################################################
# Reduces a result event to a summarized digest event.
def main(event_file):
  event = flod.Event()
  event.load(event_file)

  # TODO Capture CMake errors/warnings.

  # Patterns to search for.
  reWarning  = re.compile ('warning: ', re.IGNORECASE)
  reError    = re.compile ('error: ', re.IGNORECASE)
  reExpected = re.compile ('^1\\.\\.(\d+)$')
  rePassed   = re.compile ('^ok \d+')
  reFailed   = re.compile ('^not ok \d+')
  reSkipped  = re.compile ('^skip \d+')

  # Things that are being looked for in the event file.
  buildWarnings = 0
  buildErrors   = 0
  testsPassed   = 0
  testsFailed   = 0
  testsSkipped  = 0
  testsExpected = 0
  clean         = 0
  funky         = 0

  # This is simply a list of lines from the build log that contain information
  # that should be shown in drill-down.  As 'buildWarnings' above might be '2',
  # this list would contain both of those warnings.
  interesting = list()

  # Scan for results.
  for line in event.payload().split('\n'):
    m = reWarning.search (line)
    if m:
      interesting.append(line)
      buildWarnings += 1

    m = reError.search (line)
    if m:
      interesting.append(line)
      buildErrors += 1

    m = reExpected.match (line)
    if m:
      testsExpected += int(m.group(1))

    m = rePassed.match (line)
    if m:
      testsPassed += 1

    m = reFailed.match (line)
    if m:
      interesting.append(line)
      testsFailed += 1

    m = reSkipped.match (line)
    if m:
      testsSkipped += 1

  # Clean is an indicator that the project built and tested with no failures.
  if testsExpected > 0 and \
     testsFailed == 0 and \
     buildErrors == 0 and \
     (testsPassed + testsSkipped) == testsExpected:
    clean = 1

  # Funky is an indicator that something is wrong.
  if testsExpected == 0 or \
     (testsPassed + testsFailed + testsSkipped) != testsExpected:
    funky = 1

  # Capture the totals.
  event.header('digest.buildWarnings', buildWarnings)
  event.header('digest.buildErrors',   buildErrors)
  event.header('digest.testsPassed',   testsPassed)
  event.header('digest.testsFailed',   testsFailed)
  event.header('digest.testsSkipped',  testsSkipped)
  event.header('digest.testsExpected', testsExpected)
  event.header('digest.clean',         clean)
  event.header('digest.funky',         funky)

  event.payload ('\n'.join(interesting))

  # Post the event to central.
  central = flod.Central()
  central.post('digest', event)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for reducing a build/test log down to minimal elements,
     which are warnings, error and test results."""

  if len(sys.argv) != 2:
    print "\nUsage: thresher <result-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

