#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2016, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import shutil
import subprocess

################################################################################
# Loads a change event file and verifies that the expected header variables are
# present. Payload is ignored.
def load_event(event_file):
  """ Load an event file, and extract only the headers. """
  event = dict()
  with open(event_file) as fh:
    for line in fh:
      if line == "\n":
        break;
      sep = line.index(': ')
      event[line[:sep]] = line.strip()[sep + 2:]

  for required in ['platform.dependencies', 'platform.description', 'project.job']:
    if required not in event:
      raise ValueError ("Missing '{0}' in {1}".format(required, event_file))

  return event

################################################################################
# Create the temporary work directory, change PWD to it, and compose a log file
# name.
def setup(event):
  tempdir = '/tmp/flod.{}'.format(event['change.commit'])
  if not os.path.exists (tempdir):
    os.makedirs(tempdir)

  os.chdir (tempdir)
  logfile = '{}/result.event'.format(tempdir)

  return tempdir, logfile

################################################################################
# Remove the temporary work dir and its contents.
def teardown(dir):
  shutil.rmtree (dir)

################################################################################
def createJobScript(tempdir, contents):
  expanded = contents.replace('{sh}', '#!/bin/sh')
  expanded = expanded.replace('{bash}', '#!/bin/bash')
  expanded = expanded.replace('{nl}', '\n')

  script = '{}/job'.format(tempdir)
  with open(script, 'w') as fh:
    fh.write(expanded)
  os.chmod(script, 0o700)
  return script

################################################################################
def createResultEvent(result_file, event, log):
  with open(result_file, 'w') as fh:
    for key in event:
      fh.write('{0}: {1}\n'.format(key, event[key]))

    fh.write('\n')
    fh.write(log)

################################################################################
# Combines a change event with central configuration to yield a build event.
# Uses 'central post build $file' to queue the build event.
def main(event_file):
  """Reads input change event, emits a build event for each necessary platform."""
  event = load_event(event_file)

  original_cwd = os.getcwd()
  tempdir, result_file = setup(event)

  # TODO Install dependencies.
  #for dependency in event['platform.dependencies'].split():
  #  print("pkgadd {}".format(dependency))

  # Note: Python 2.x specific. For 3.x change to 'stderr=sys.stdout.buffer'
  script = createJobScript(tempdir, event['project.job'])
  output = subprocess.Popen([script], stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate(0)

  # Write output to an event file.
  createResultEvent(result_file, event, output[0])

  # Post the event to central.
  # Note: Must be run from original location, so that central can find .flodrc.
  os.chdir(original_cwd)
  subprocess.Popen(["central", "post", "result", result_file], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

  # Cleanup.
  teardown(tempdir)


################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for building and testing on the local machine."""

  if len(sys.argv) != 2:
    print "\nUsage: build_local <build-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

