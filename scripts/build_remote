#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2017, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import shutil
import subprocess
import flod
import datetime

################################################################################
# Create the temporary work directory, change PWD to it, and compose a log file
# name.
def setup(event):
  tempdir = '/tmp/{0}.{1}.{2}'.format(event.header('change.project'), event.header('change.commit'), event.header('platform.name'))
  if not os.path.exists (tempdir):
    os.makedirs(tempdir)

  os.chdir (tempdir)
  return tempdir

################################################################################
# Remove the temporary work dir and its contents.
def teardown(dir):
  shutil.rmtree (dir)

################################################################################
def createJobScript(tempdir, contents):
  expanded = contents.replace('{sh}', '#!/bin/sh')
  expanded = expanded.replace('{bash}', '#!/bin/bash')
  expanded = expanded.replace('{nl}', '\n')

  script = '{}/job'.format(tempdir)
  with open(script, 'w') as fh:
    fh.write(expanded)
  os.chmod(script, 0o700)
  return script

################################################################################
# Guided by a build event, obtains, builds and tests a project, capturing all
# the output.
def main(event_file):
  event = flod.Event()
  event.load(event_file)
  for required in ['platform.dependencies', 'platform.description', 'project.job']:
    if not event.has(required):
      raise ValueError ("Missing '{0}' in {1}".format(required, event_file))

  original_cwd = os.getcwd()
  tempdir = setup(event)

  start = datetime.datetime.now()

  host = event.header('platform.host')
  scratch = event.header('platform.scratch')
  script = createJobScript(tempdir, event.header('project.job'))
  id = '{0}.{1}'.format(event.header('change.project'), event.header('change.commit'))

  log, err = subprocess.Popen(['ssh', host, 'mkdir {0}/{1}'.format(scratch, id)],
               stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()

  out, err = subprocess.Popen(['scp', script, '{0}:{1}/{2}/{2}.job'.format(host, scratch, id)],
               stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
  log += out

  out, err = subprocess.Popen(['ssh', host, 'cd {0}/{1} && ./{1}.job'.format(scratch, id)],
                    stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
  log += out

  out, err = subprocess.Popen(['ssh', host, 'rm -rf {0}/{1}'.format(scratch, id)],
               stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()
  log += out

  event.header('build.duration', (datetime.datetime.now() - start).microseconds / 1e6)
  event.payload(log)

  # Note: Must be run from original location, so that central can find .flodrc.
  os.chdir(original_cwd)
  central = flod.Central()
  central.post('result', event)

  teardown(tempdir)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for building and testing on the remote machine."""

  if len(sys.argv) != 2:
    print "\nUsage: build_remote <build-platform-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

