#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2016, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import subprocess
import re
import tempfile

################################################################################
# Loads a change event file and verifies that the expected header variables are
# present. Payload is ignored.
def load_event(event_file):
  """ Load an event file, and extract only the headers. """
  event = dict()
  with open(event_file) as fh:
    for line in fh:
      if line == "\n":
        break;
      sep = line.index(': ')
      event[line[:sep]] = line.strip()[sep + 2:]

  for required in ['platform.dependencies', 'platform.description', 'project.get', 'project.build', 'project.test']:
    if required not in event:
      raise ValueError ("Missing '%s' in %s" % (required, event_file))

  return event

################################################################################
# Combines a change event with central configuration to yield a build event.
# Uses 'central post build $file' to queue the build event.
def main(event_file):
  """Reads input change event, emits a build event for each necessary platform."""
  event = load_event(event_file)

  # TODO Run build phases on remote machine.

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for building on a remote extant machine."""

  if len(sys.argv) != 2:
    print "\nUsage: build_remote <build-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

