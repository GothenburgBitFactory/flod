#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2017, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import sys
import re
import flod

################################################################################
# Combines a change event with central configuration to yield a build event.
def main(event_file):
  event = flod.Event()
  event.load(event_file)
  for required in ['change.project', 'change.repository', 'change.author', 'change.commit', 'change.timestamp', 'change.branch']:
    if not event.has(required):
      raise ValueError ("Missing '{0}' in {1}".format(required, event_file))

  project = event.header('change.project')

  config = flod.Config()

  for platform in config.get("project.{0}.platforms".format(project)).split(','):
    build = flod.Event()
    for k,v in event.items():
      build.header(k, v)

    for detail in ['repository', 'job', 'ignore']:
      build.header ('project.{}'.format(detail), config.get('project.{0}.{1}'.format(project, detail)))

    build.header('platform.name',        platform)
    build.header('platform.description', config.get('platform.{}.description'.format(platform)))
    build.header('platform.details',     config.get('platform.{}.details'.format(platform)))

    # A remote platform has a host name entry.
    host = config.get('platform.{}.host'.format(platform))
    if host != '':
      build.header('platform.host',    host)
      build.header('platform.scratch', config.get('platform.{}.scratch'.format(platform)))

    dependencies = list()
    for dependency in config.get('project.{}.dependencies'.format(project)).split(','):
      mapped = config.get('platform.{0}.pkg.{1}'.format(platform, dependency))
      if mapped:
        build.header('platform.pkg.{}'.format(dependency), mapped)
        dependencies.append(mapped)
    build.header('platform.dependencies', ','.join(dependencies))

    # Write the build event to tmp file.
    for key,value in build.items():
      # All values need expansion.
      for match in re.findall (r'{([^}]+)}', value):
        if build.has(match):
          value = value.replace('{%s}' % match, build.header(match))
      build.header(key, value)

    central = flod.Central()
    central.post("build_{}".format(platform), build)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for issuing build events in response to change events."""

  if len(sys.argv) != 2:
    print "\nUsage: platforms <change-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

