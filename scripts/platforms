#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2016, GÃ¶teborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import subprocess
import re
import tempfile
import flod

################################################################################
# Loads a change event file and verifies that the expected header variables are
# present.
def load_event(event_file):
  headers = dict()
  body = ''
  in_headers = True
  with open(event_file) as fh:
    for line in fh:
      if line == "\n":
        in_headers = False
      elif in_headers:
        sep = line.index(': ')
        headers[line[:sep]] = line.strip()[sep + 2:]
      else:
        body += line

  for required in ['change.project', 'change.repository', 'change.author', 'change.commit', 'change.timestamp', 'change.branch']:
    if required not in headers:
      raise ValueError ("Missing '{0}' in {1}".format(required, event_file))

  return headers, body

################################################################################
# Combines a change event with central configuration to yield a build event.
def main(event_file):
  event, payload = load_event(event_file)
  project = event['change.project']

  config = flod.Config()

  for platform in config.get("project.{0}.platforms".format(project)).split(','):
    build = dict()
    for k,v in event.items():
      build[k] = v

    for detail in ['repository', 'job', 'ignore']:
      build['project.{}'.format(detail)] = config.get('project.{0}.{1}'.format(project, detail))

    build['platform.name']        = platform
    build['platform.description'] = config.get('platform.{}.description'.format(platform))
    build['platform.details']     = config.get('platform.{}.details'.format(platform))

    dependencies = list()
    for dependency in config.get('project.{}.dependencies'.format(project)).split(','):
      mapped = config.get('platform.{0}.pkg.{1}'.format(platform, dependency))
      if mapped:
        dependencies.append(mapped)
    build['platform.dependencies'] = ','.join(dependencies)

    # Write the build event to tmp file.
    temp_fh, temp_name = tempfile.mkstemp()
    for key in sorted(build):
      # All values need expansion.
      value = build[key]
      for match in re.findall (r'{([^}]+)}', value):
        if match in build:
          value = value.replace('{%s}' % match, build[match])
      build[key] = value

      os.write(temp_fh, '{0}: {1}\n'.format(key, build[key]))
    os.write(temp_fh, '\n')
    os.close(temp_fh)

    # Post the event to central.
    # TODO Do something with errors.
    out, err = subprocess.Popen(["central", "post", ("build_{}".format(platform)), temp_name], stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()

    os.unlink(temp_name)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for issuing build events in response to change events."""

  if len(sys.argv) != 2:
    print "\nUsage: platforms <change-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

