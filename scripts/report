#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2016, Göteborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import re
import shutil
import json
import flod

template_header="""<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href="/images/favicon.ico">

    <title>Flod - Grid CI</title>

    <link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <style type="text/css">
      /* "foo" element, "#foo ID, ".foo" class */
      html                   {position:relative; min-height:100%;}
      body                   {color:#bbb; background-color:#222; margin-top:60px; margin-bottom:80px; z-index:1}
      th                     {border:3px solid #222; margin:4px; color:#bbb; padding:2px;}
      td                     {border:3px solid #222; margin:4px;             padding:2px;}
      a:link, a:visited      {color:#bbb;}
      a:hover                {color:#ddd;}
      a:active               {color:#fff;}
      .flod-commit           {background-color:#444;}
      .flod-details          {font-weight:100; font-size:75%;}
      .flod-header           {margins:0px;padding:0px;  background-color:#000; width:100%; position:fixed; top:0;    z-index:2}
      .flod-footer           {margins:0px;padding:12px; background-color:#000; width:100%; position:fixed; bottom:0; z-index:3; color:#666}
      .flod-large            {font-size:200%}
    </style>

    <!--[if lt IE 9]><script src="/bootstrap/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>
    <!-- dynamic content start -->
"""

template_title="""
    <div class="flod-header flod-large">
      <a href="https://cen.tasktools.org"><img src="/images/flod-m.png" alt="Flod"></a>
      <strong>&nbsp;FLOD Testing</strong> | {0} {1}
    </div>
"""

template_footer="""
    <!-- dynamic content end -->

    <div class="flod-footer" style="text-align:right;">
      Copyright &copy; 2016 Göteborg Bit Factory
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script src="/bootstrap/js/bootstrap.min.js"></script>

    <!-- Piwik -->
    <script type="text/javascript">
      var _paq = _paq || [];
      _paq.push(["trackPageView"]);
      _paq.push(["enableLinkTracking"]);

      (function() {
        var u=(("https:" == document.location.protocol) ? "https" : "http") + "://see.tasktools.org/piwik/";
        _paq.push(["setTrackerUrl", u+"piwik.php"]);
        _paq.push(["setSiteId", "3"]);
        var d=document, g=d.createElement("script"), s=d.getElementsByTagName("script")[0]; g.type="text/javascript";
        g.defer=true; g.async=true; g.src=u+"piwik.js"; s.parentNode.insertBefore(g,s);
      })();
    </script>
    <!-- End Piwik Code -->
  </body>
</html>
"""

################################################################################
# Stores the new digest event in the work tree.
# Combines all digest events into a commit-level JSON file.
# Combine all the commit-level JSON files into a report.
# Write the report to the work tree.
# Publish the report.
def main(event_file):
  event = flod.Event()
  event.load(event_file)
  config = flod.Config()

  # Convenience.
  project = event.header('change.project')
  branch  = event.header('change.branch')

  # Create the work path, if necessary, and copy the digest event into the tree.
  commit_path = "{0}/{1}/{2}/{3}".format(config.get('work.dir'), project, branch, event.header('change.commit'))
  digest_file = "digest.{}.msg".format(event.header('platform.name'))

  if not os.path.exists(commit_path):
    os.makedirs(commit_path)

  shutil.copyfile(event_file, os.path.join(commit_path, digest_file))

  # If the 'commit.json' file exists, load it, else prime the header.
  commit_file = os.path.join(commit_path, "commit.json")
  if os.path.exists (commit_file):
    with open(commit_file) as fh:
      commit_json = json.load(fh)
  else:
    commit_json = {"repository": event.header("change.repository"),
                   "commit":     event.header("change.commit"),
                   "author":     event.header("change.author"),
                   "timestamp":  event.header("change.timestamp"),
                   "project":    project,
                   "branch":     branch,
                   "platforms":  {}}

  # Add the platform-specific results from the digest event.
  commit_json["platforms"][event.header("platform.name")] = dict()
  platform_node = commit_json["platforms"][event.header("platform.name")]

  platform_node["description"] = json.JSONEncoder().encode(event.header("platform.description"))
  platform_node["details"]     = json.JSONEncoder().encode(event.header("platform.details"))
  platform_node["skipped"]     = event.header("digest.testsSkipped")
  platform_node["passed"]      = event.header("digest.testsPassed")
  platform_node["failed"]      = event.header("digest.testsFailed")
  platform_node["expected"]    = event.header("digest.testsExpected")
  platform_node["warnings"]    = event.header("digest.buildWarnings")
  platform_node["errors"]      = event.header("digest.buildErrors")
  platform_node["log"]         = list()

  for line in event.payload().split('\n'):
    if len(line):
      platform_node["log"].append(json.JSONEncoder().encode(line))

  # Save the commit JSON file in the tree.
  with open(commit_file, 'w') as fh:
    fh.write(json.dumps(commit_json, sort_keys=True, indent=2, separators=(',', ': ')))

  # TODO Obtain the set of all platforms from configuration. If the commit_json
  #      dict shows zero failures/warnings from all platforms, post a 'clean'
  #      event.

  # Iterate over all the commit JSON files to create the report.
  all_commits = list()
  branch_path = "{0}/{1}/{2}".format(config.get('work.dir'), project, branch)
  for commit in os.listdir(branch_path):
    if len(commit) == 40: # Length of a SHA1.
      commit_json_file = os.path.join(branch_path, commit, 'commit.json')
      with open(commit_json_file) as fh:
        all_commits.append(json.load(fh))

  # Write the report.
  report_file = "{0}/{1}/{2}/report.html".format(config.get('work.dir'), project, branch)
  with open(report_file, 'w') as report:
    report.write(template_header)
    report.write(template_title.format(project, branch))

    report.write("""    <div class="container">
      <div class="col-md-12 main">
        <div class="row">
          <br />

          <table>
            <thead>
              <tr>
                <th />\n""")

    # Write table headers.
    for platform in sorted(config.get('project.{0}.platforms'.format(project)).split(',')):
      description = config.get('platform.{0}.description'.format(platform))
      details     = config.get('platform.{0}.details'.format(platform)).replace(';', '<br />')
      report.write('<th data-toggle="collapse" data-target="#{0}">{1}<div id="{0}" class="collapse out flod-details">{2}</div></th>\n'.format(platform, description, details))

    report.write("""              </tr>
            </thead>
            <tbody>\n""")

    # Only show the first N commits.
    # TODO The '50' should come from configuration.
    counter = 0
    for commit in sorted(all_commits, reverse=True, key=lambda x:x["timestamp"]):
      counter += 1
      if counter > 50:
        break

      if counter == 1:
        report.write("# project {0} branch {1}\n".format(commit["project"], commit['branch']))

      report.write("# timestamp {0} commit {1} author {2}\n".format(commit["timestamp"], commit["commit"], commit["author"]))

      for platform in commit["platforms"]:
        report.write("#   platform {0} {1} {2}, {3}/{4}, {5} warnings, {6} errors\n".format(
                       platform,
                       commit["platforms"][platform]["description"],
                       commit["platforms"][platform]["details"],
                       commit["platforms"][platform]["passed"],
                       commit["platforms"][platform]["expected"],
                       commit["platforms"][platform]["warnings"],
                       commit["platforms"][platform]["errors"]))
        for error in commit["platforms"][platform]["log"]:
          report.write("#     error {0}\n".format(error))
    report.write("""
            </tbody>
          </table>

          <br />
          <p>{0}</p>
        </div>
      </div>
    </div>""".format(summary))

    report.write(template_footer)

  # Publish the report.
  publish_event = flod.Event()
  publish_event.header('from', report_file)
  publish_event.header('to', os.path.join(config.get('report.destination'), '{0}.{1}.html'.format(commit["project"], commit["branch"])))

  central = flod.Central()
  central.post('publish', publish_event)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for building a tinderbox report from digest events."""

  if len(sys.argv) != 2:
    print "\nUsage: report <digest-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

