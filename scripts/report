#!/usr/bin/env python
# -*- coding: utf-8 -*-
################################################################################
##
## Copyright 2012 - 2017, Göteborg Bit Factory.
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included
## in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
## OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
## THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.
##
## http://www.opensource.org/licenses/mit-license.php
##
################################################################################

import os
import sys
import re
import shutil
import json
import time
import datetime
import flod

template_header="""<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href="/images/favicon.ico">

    <title>Flod2 - Grid CI</title>

    <link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <style type="text/css">
      /* "foo" element, "#foo ID, ".foo" class */
      html                   {position:relative; min-height:100%;}
      body                   {color:#bbb; background-color:#222; margin-top:60px; margin-bottom:80px; z-index:1}
      th                     {border:3px solid #222; margin:4px; color:#bbb; padding:2px;}
      td                     {border:3px solid #222; margin:4px;             padding:2px;}
      a:link, a:visited      {color:#bbb;}
      a:hover                {color:#ddd;}
      a:active               {color:#fff;}
      .flod-commit           {color:#bbb; background-color:#444;}
      .flod-commit-clean     {color:#c6e2ff; background-color:#417dba;}
      .flod-commit-funky     {color:#ffafd7; background-color:#822453;}
      .flod-details          {font-weight:100; font-size:75%;}
      .flod-header           {margins:0px;padding:0px;  background-color:#000; width:100%; position:fixed; top:0;    z-index:2}
      .flod-footer           {margins:0px;padding:12px; background-color:#000; width:100%; position:fixed; bottom:0; z-index:3; color:#666}
      .flod-large            {font-size:200%}
    </style>

    <!--[if lt IE 9]><script src="/bootstrap/js/ie8-responsive-file-warning.js"></script><![endif]-->
    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>
    <!-- dynamic content start -->
"""

template_title="""
    <div class="flod-header flod-large">
      <a href="https://cen.tasktools.org"><img src="/images/flod-m.png" alt="Flod"></a>
      <strong>&nbsp;FLOD Testing</strong> | {} {}
    </div>
"""

template_copyright="""
    <!-- dynamic content end -->

    <div class="flod-footer" style="text-align:right;">
      Copyright &copy; {} Göteborg Bit Factory
    </div>
"""

template_footer="""
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script src="/bootstrap/js/bootstrap.min.js"></script>

    <!-- Piwik -->
    <script type="text/javascript">
      var _paq = _paq || [];
      _paq.push(["trackPageView"]);
      _paq.push(["enableLinkTracking"]);

      (function() {
        var u=(("https:" == document.location.protocol) ? "https" : "http") + "://see.tasktools.org/piwik/";
        _paq.push(["setTrackerUrl", u+"piwik.php"]);
        _paq.push(["setSiteId", "3"]);
        var d=document, g=d.createElement("script"), s=d.getElementsByTagName("script")[0]; g.type="text/javascript";
        g.defer=true; g.async=true; g.src=u+"piwik.js"; s.parentNode.insertBefore(g,s);
      })();
    </script>
    <!-- End Piwik Code -->
  </body>
</html>
"""

################################################################################
def which_color(percentage):
  # Only 100% is green.
  if percentage >= 100.0:
    return '#080', '#a0ff00'

  # Yellow
  #   255 255 000    #99
  #   187 000 000    #90
  elif percentage > 90.0:
    red   = (((percentage - 90.0) / 10.0) * (255 - 187)) + 187
    green = ((percentage - 90.0) / 10.0) * 256
    fg = '#000'

  # Red
  #   187 000 000    #90
  #   187 094 000    #75
  elif percentage > 75.0:
    red = 187
    green = ((15.0 - (percentage - 75.0)) / 15.0) * 94
    fg = '#000'

  # Brown
  #   187 094 000    #75
  #   095 047 000    #0
  elif percentage > 0.0:
    red   = ((percentage / 75.0) * (187 - 95)) + 95
    green = ((percentage / 75.0) * (94 - 47)) + 47
    fg = '#fff'

  # Black
  #   000 000 000    #0
  else:
    # Tests did run.
    red = 0
    green = 0
    fg = '#fff'

  return fg, '#{:02X}{:02X}00'.format(int(red), int(green))

################################################################################
# Create the work path, if necessary, and copy the digest event into the tree.
def storeDigestFile(config, event, event_file):
  commit_path = '{}/{}/{}/{}'.format(config.get('work.dir'),
                                     event.header('change.project'),
                                     event.header('change.branch'),
                                     event.header('change.commit'))
  digest_file = 'digest.{}.msg'.format(event.header('platform.name'))
  if not os.path.exists(commit_path):
    os.makedirs(commit_path)

  # Store the digest results in the work tree.
  shutil.copyfile(event_file, os.path.join(commit_path, digest_file))
  return commit_path

################################################################################
# If the 'commit.json' file exists, load it, else prime the header.
def getCommitData(config, event, commit_path):
  commit_file = os.path.join(commit_path, 'commit.json')
  if os.path.exists (commit_file):
    with open(commit_file) as fh:
      commit_json = json.load(fh)
  else:
    commit_json = {'repository': event.header('project.repository'),
                   'commit':     event.header('change.commit'),
                   'author':     event.header('change.author'),
                   'timestamp':  event.header('change.timestamp'),
                   'project':    event.header('change.project'),
                   'branch':     event.header('change.branch'),
                   'platforms':  {}}
  return commit_file, commit_json

## Save the commit JSON file in the tree.
def writeCommitData(commit_file, commit_json):
  with open(commit_file, 'w') as fh:
    fh.write(json.dumps(commit_json, sort_keys=True, indent=2, separators=(',', ': ')))

################################################################################
# Transfer the digest data. Set 'clean' if the tests all pass.
def transferDigestData(commit_json, event):
  commit_json['platforms'][event.header('platform.name')] = dict()
  platform_node = commit_json['platforms'][event.header('platform.name')]

  platform_node['description'] = json.JSONEncoder().encode(event.header('platform.description'))
  platform_node['details']     = json.JSONEncoder().encode(event.header('platform.details'))
  platform_node['skipped']     = event.header('digest.testsSkipped')
  platform_node['passed']      = event.header('digest.testsPassed')
  platform_node['failed']      = event.header('digest.testsFailed')
  platform_node['expected']    = event.header('digest.testsExpected')
  platform_node['warnings']    = event.header('digest.buildWarnings')
  platform_node['errors']      = event.header('digest.buildErrors')
  platform_node['clean']       = event.header('digest.clean')
  platform_node['funky']       = event.header('digest.funky')
  platform_node['duration']    = event.header('build.duration')
  platform_node['log']         = list()

  for line in event.payload().split('\n'):
    if len(line):
      platform_node['log'].append(json.JSONEncoder().encode(line))

################################################################################
# Iterate over all the commit JSON files and combine them.
def combineCommits(config, event):
  all_commits = list()
  branch_path = '{}/{}/{}'.format(config.get('work.dir'), event.header('change.project'), event.header('change.branch'))
  for commit in os.listdir(branch_path):
    if len(commit) == 40: # Length of a SHA1.
      commit_json_file = os.path.join(branch_path, commit, 'commit.json')
      with open(commit_json_file) as fh:
        all_commits.append(json.load(fh))

  return all_commits

################################################################################
# Obtain the set of all platforms from configuration. If the commit_json dict
# shows zero failures/warnings from all platforms, post a 'clean' event.
def categorizeCommits(config, event, all_commits):
  for commit in all_commits:
    commit['clean'] = '1'
    commit['funky'] = '0'
    tests = 0
    for platform in config.get('project.{}.platforms'.format(event.header('change.project'))).split(','):
      # Platform is expected to provide results, but has not yet done so.
      if platform not in commit['platforms']:
        commit['clean'] = '0'
        continue

      # Platform results are not clean.
      if 'clean' in commit['platforms'][platform] and commit['platforms'][platform]['clean'] == '0':
        commit['clean'] = '0'

      # Something is not right.
      if 'funky' in commit['platforms'][platform] and commit['platforms'][platform]['funky'] == '1':
        commit['funky'] = '1'


      # If the platforms do not all agree on the expected number of tests, then
      # something is wrong.
      if tests == 0:
        tests = commit['platforms'][platform]['expected']
      elif tests != commit['platforms'][platform]['expected']:
        commit['funky'] = '1'

    if commit['commit'] == event.header('change.commit') and commit['clean'] == '1':
      # Clone the important parts of the event
      clean_event = flod.Event()

      k = 'project.{}.snapshot'.format(event.header('change.project'))
      clean_event.header(k, config.get (k))

      for k in ['change.project', 'change.commit', 'project.job']:
        clean_event.header(k, event.header (k))

      central = flod.Central()
      central.post('clean', clean_event)

################################################################################
# Determine the commit-class-xxx based on aggregated build data.
def determineCommitClass(commit):
  if 'funky' in commit and commit['funky'] == '1':
    return 'flod-commit-funky'

  if 'clean' in commit and commit['clean'] == '1':
    return 'flod-commit-clean'

  return 'flod-commit'

################################################################################
def composeCommitDescription(config, project, commit):
  commit_class = determineCommitClass(commit)
  utc = datetime.datetime.utcfromtimestamp(int(commit['timestamp'])).isoformat()

  # Commits older than 30 days (overridable) are locked.
  expiration = int(config.get('commit.locked')) if config.get('commit.locked') != '' else 30
  locked = ''
  if int(commit['timestamp']) < (int(time.time()) - expiration * 86400):
    locked = ' <span class="badge"><span class="glyphicon glyphiconicon-lock glyphicon-white"></span> Locked</span>'

  # Gitea: https://vostok.tasktools.org/TM/task/commit/1c1d9428c52250bc244edd509e9316e6c24fdd47
  if 'vostok.tasktools.org' in commit['repository']:
    project_name = project.replace('.git', '')
    commit_url = commit['repository'].replace('.git', '')
    commit_url += '/commit/{}'.format(commit['commit'])
    link = '<a href="{}">{}</a>{}'.format(commit_url, commit['commit'][:8], locked)

  # BitBucket: https://git.tasktools.org/projects/tm/repos/task/commits/00a4cbf906901a13a10e1e5459db42813e3595ca
  elif 'git.tasktools.org' in commit['repository']:
    project_name = project.replace('.git', '')
    commit_url = commit['repository'].replace('/scm/', '/projects/')
    commit_url = commit_url.replace('/{}.git'.format(project_name), '/repos/{}/commits/{}/'.format(project_name, commit['commit']))
    link = '<a href="{}">{}</a>{}'.format(commit_url, commit['commit'][:8], locked)

  else:
    link = '{}{}'.format(commit['commit'][:8], locked)

  # TODO Include git tags?
  return '                <td class="{}">{}Z<br />&nbsp;&nbsp;<small>{}<br />&nbsp;&nbsp;{}</small></td>\n'.format(commit_class, utc, link, commit['author'])

################################################################################
def composePlatformResult(platform, commit):
  # percent = 100.0 * (pass + skipped) / expected
  good = int(commit['platforms'][platform]['passed']) + int(commit['platforms'][platform]['skipped'])
  expected = int(commit['platforms'][platform]['expected'])
  if expected > 0:
    percentage = 100.0 * good / expected
  else:
    percentage = 0.0

  # Percentage determines color.
  fg, bg = which_color (percentage)

  control = ''
  errors = ''
  warning_indicator = ''
  error_indicator = ''
  if int(commit['platforms'][platform]['warnings']) > 0 or \
     int(commit['platforms'][platform]['errors'])   > 0 or \
     int(commit['platforms'][platform]['failed'])   > 0:
    control = ' data-toggle="collapse"; data-target="#log{}{}";'.format(commit['commit'][:8], platform)

    if int(commit['platforms'][platform]['warnings']) > 0:
      warning_indicator = '<span class="label label-warning">W</span>'

    if int(commit['platforms'][platform]['errors']) > 0:
      error_indicator = '<span class="label label-danger">E</span>'

    if int(commit['platforms'][platform]['failed']) > 0:
      error_indicator = '<span class="label label-danger">T</span>'

    errors = '<div id="log{}{}" class="collapse out">\n                    <small>\n                      {}\n                    </small>\n                  </div>'.format(commit['commit'][:8], platform, '<br />'.join(commit['platforms'][platform]['log']))

  html =  '                <td style="color:{}; background-color:{};"{}>\n'.format(fg, bg, control)
  html += '                  <div>\n'

  if percentage >= 100.0:
    html += '                    <strong>100%</strong>\n'
  else:
    html += '                    <strong>{:.2f}%</strong> {}/{}\n'.format(percentage, good, expected)

  html += '                  </div>\n'
  if warning_indicator != '':
    html += '                  {}\n'.format(warning_indicator)
  if error_indicator != '':
    html += '                  {}\n'.format(error_indicator)
  if errors != '':
    html += '                  {}\n'.format(errors)
  html += '                  <small>{:.2f}s</small>\n'.format(float(commit['platforms'][platform]['duration']))

  return html

################################################################################
# Create the report.html fiŀe.
def writeReport(config, event, all_commits):
  project = event.header('change.project')
  branch = event.header('change.branch')
  report_file = '{}/{}/{}/report.html'.format(config.get('work.dir'), project, branch)
  with open(report_file, 'w') as report:
    report.write(template_header)
    report.write(template_title.format(project, branch))

    report.write("""    <div class="container">
      <div class="col-md-12 main">
        <div class="row">
          <br />

          <table>
            <thead>
              <tr>
                <th />\n""")

    # Write table headers.
    for platform in sorted(config.get('project.{}.platforms'.format(project)).split(',')):
      description = config.get('platform.{}.description'.format(platform))
      details     = config.get('platform.{}.details'.format(platform)).replace(';', '<br />')
      report.write('                <th data-toggle="collapse" data-target="#{0}">{1}<div id="{0}" class="collapse out flod-details">{2}</div></th>\n'
                   .format(platform, description, details))

    report.write("""              </tr>
            </thead>
            <tbody>\n""")

    # Only show the first N commits.
    limit = int(config.get('report.length')) if config.get('report.length') != '' else 50

    counter = 0
    for commit in sorted(all_commits, reverse=True, key=lambda x:x['timestamp']):
      counter += 1
      if counter > limit:
        break

      report.write('              <tr>\n')
      report.write (composeCommitDescription(config, project, commit))
      for platform in sorted(config.get('project.{}.platforms'.format(project)).split(',')):
        if platform in commit['platforms']:
          report.write (composePlatformResult(platform, commit))
        else:
          report.write('                <td />\n')
      report.write('              </tr>\n')

    # Write summary commit count.
    if counter <= limit:
      summary = '{} commits shown.'.format(counter)
    else:
      summary = '{} commits not shown.'.format(len(all_commits) - limit)

    report.write("""            </tbody>
          </table>

          <br />
          <p>{}</p>

        </div>
      </div>
    </div>""".format(summary))

    report.write(template_copyright.format(datetime.datetime.now().year))
    report.write(template_footer)
  return report_file

################################################################################
# Publish the report file.
def publishReport(config, event, report_file):
  publish_event = flod.Event()
  publish_event.header('from', report_file)
  publish_event.header('to', os.path.join(config.get('report.destination'), '{}.{}.html'.format(event.header('change.project'), event.header('change.branch'))))

  central = flod.Central()
  central.post('publish', publish_event)

################################################################################
# Stores the new digest event in the work tree.
# Combines all digest events into a commit-level JSON file.
# Combine all the commit-level JSON files into a report.
# Write the report to the work tree.
# Publish the report.
def main(event_file):
  event = flod.Event()
  event.load(event_file)
  config = flod.Config()

  ## Store the digest results in the work tree.
  commit_path = storeDigestFile(config, event, event_file)

  # Create/update the commit.json file.
  commit_file, commit_json = getCommitData(config, event, commit_path)
  transferDigestData(commit_json, event)
  writeCommitData(commit_file, commit_json)

  # Scan and look for clean/funky commits.
  all_commits = combineCommits(config, event)
  categorizeCommits(config, event, all_commits)

  report_file = writeReport(config, event, all_commits)
  publishReport(config, event, report_file)

################################################################################
# Entry point.  Checks only that there is one command line argument.
if __name__ == "__main__":
  """Flod2 hook script for building a tinderbox report from digest events."""

  if len(sys.argv) != 2:
    print "\nUsage: report <digest-event-file>\n\n"
    sys.exit(1)

  try:
    main(sys.argv[1])
  except Exception as msg:
    print('Error:', msg)

