Flod2 Example - Live Demo
-------------------------

This document will lead you through a ten-minute demonstration of Flod2. The
demo is automated, and discussed below.


0. System requirements

  This demo requires an installed copy of Flod2, which means it needs to be in
  your $PATH.  In a real installation, you would have choices, but this is an
  automated demo, and some assumptions have been made.

  You will need:
    - git
    - cmake 3.2+
    - make
    - gcc 4.7+ or clang 3.3+


1. Build Flod2

  You already have the source code, so the first step is to build and install
  flod.  Run the following commands.  Some of these you have likely already run,
  but the full set are included for illustration:

     $ cd
     $ git clone https://git.tasktools.org/scm/ts/flod2.git flod2.git
     $ cd flod2.git
     $ cmake .
     $ make
     $ sudo make install


2. Once you have an installed copy of Flod2, you can begin to run the demo.
   First go to the example directory (where this file resides):

     $ cd flod.git/example
     $ ls
     README change.dev cleanup run.central setup.central setup.dev

   Run the 'cleanup' script if you have run this demo before, then the two
   'setup' scripts.

     $ ./cleanup
     $ ./setup.dev
     $ ./setup.central

   This creates a sample 'dev' project, containing a git post-commit hook that
   posts a change event to the 'changes' queue.


3. When the configuration and queue structures are in place, run central with
   this command:

     $ ./run.central

   This command will run continually. Diagnostics will be written to the log
   file in central/central.log. The system will immediately go to a quiet state
   because no events are queued.


4. To generate some activity, make a change in the 'dev' project and commit it.
   This is most easily done by running:

     $ ./change.dev

   This commits a change in the 'dev' git repository, the post-commit hook then
   composes a change event and posts it to the 'changes' queue.


5. The 'prepare_builds' script is hooked into the changes queue, and uses the
   contents of the change event to compose a build event for each of the
   configured platforms. These get posted to the 'build-debian7' and
   'build-freebsd9' queues. These build events contain sufficient information
   to permit an autonomous provision/clone/build/test cycle on the platform.

[more coming]

---
